#!/usr/bin/env babel-node
// WARNING: Program must be run via `babel-node` which is setup via `npm`
/* eslint-disable global-require */
// Based on https://gist.github.com/twolfson/c1de950ea28fcbf74be8962257bd75bc
// Load in our dependencies
import cluster from 'cluster';

const notWinston = console;

// If we are on the master
// DEV: Ideally we skip cluster and use multiple servers but this is for demonstration
if (cluster.isMaster) {
  // Load master specific dependencies
  const config = require('../config').getConfig();
  const url = require('url');

  // Create 2 workers (i.e. server instances)
  cluster.fork();
  cluster.fork();

  // If a worker disconnects, restart it
  cluster.on('disconnect', function handleDisconnect (worker) {
    notWinston.info('Worker disconnected, restarting worker');
    cluster.fork();
  });

  // Notify the user that the server is running
  const serverUrl = url.format(config.url.external) + '/';
  notWinston.info('Server running at ' + serverUrl);
// Otherwise (we are on the worker)
} else {
  // Load worker specific dependencies
  // DEV: We lazy load server after Express is monkey patched so our domains catch all the things
  const expressDomainWrapper = require('../server/utils/express-domain-wrapper');
  let server;

  // Monkey patch Express with domain handle
  expressDomainWrapper.monkeyPatchExpress(function handleControllerDomainError (err, req, res, next) {
    // Make sure we shut this worker down within 30 seconds
    let killTimeout = setTimeout(function handleSetTimeout () { // eslint-disable-line callback-return
      process.exit(1);
    }, 30e3);

    // Remove `killTimeout` from the event loop tracking
    //   https://nodejs.org/api/timers.html#timers_timeout_unref
    // DEV: This prevents us from keeping the process open only for this timer
    killTimeout.unref();

    // Shut down the worker as we don't know how to recover from the unexpected error
    notWinston.info('UNEXPECTED/UNHANDLED ERROR ENCOUNTERED, SHUTTING DOWN SERVER');
    server.close();

    // Notify the master we are shutting down
    // DEV: This triggers a `disconnect` event in the `master` process
    cluster.worker.disconnect();

    // Pass `err` to our `next` function
    // DEV: This is the `next` function from the controller's invocation
    //   This will let our error handlers take care of error reporting
    return next(err);
  });

  // Start our server listener
  /* eslint-disable no-restricted-globals */
  server = require('../server/index.js').default;
  /* eslint-enable no-restricted-globals */
  server.listen();
}

// When we encounter an uncaught exception, log it
// TODO: When we have load balanced servers and can tolerate dropped connections
//   then hard fail this server in production so it can reboot fresh
process.on('uncaughtException', function handleUncaughtException (err) {
  notWinston.error(err);
});
